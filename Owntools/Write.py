# -*- coding: utf-8 -*-
"""
@author: Alexandre Sac--Morane
alexandre.sac-morane@uclouvain.be

This file contains the different functions to write files used in the simulation.
"""

#-------------------------------------------------------------------------------
#Librairy
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------

def Write_vtk(namefile, L_g):
    """
    Write a .vkt readable with Paraview.

        Input :
            a name of the file (a string)
            a list of grain (a list)
        Output :
            Nothing, but a .vtk file is generated (a file)
    """
    file_to_write = open(namefile, 'w')
    file_to_write.write('# vtk DataFile Version 4.1\n')
    file_to_write.write('Generated by DEM_OedometricTest_AcidInjection\n')
    file_to_write.write('ASCII\n')
    file_to_write.write('DATASET POLYDATA\n')

    #coordinates of points
    file_to_write.write('POINTS '+str(len(L_g))+' float\n')
    counter = 0
    for grain in L_g :
        file_to_write.write(str(grain.center[0])+' '+str(grain.center[1])+' '+str(grain.center[2]))
        counter = counter + 1
        if counter == 3:
            file_to_write.write('\n')
            counter = 0
        else :
            file_to_write.write(' ')
    if counter < 3 :
        file_to_write.write('\n')

    #vertices of points
    file_to_write.write('VERTICES '+str(len(L_g))+' '+str(2*len(L_g))+'\n')
    counter = 0
    for grain in L_g :
        file_to_write.write('1 '+str(counter)+'\n')
        counter = counter + 1

    file_to_write.write('\n')
    file_to_write.write('POINT_DATA '+str(len(L_g))+'\n')
    file_to_write.write('FIELD FieldData 4\n')

    #ids of point
    file_to_write.write('id 1 '+str(len(L_g))+' int\n')
    counter = 0
    for grain in L_g :
        file_to_write.write(str(grain.id))
        counter = counter + 1
        if counter == 9:
            file_to_write.write('\n')
            counter = 0
        else :
            file_to_write.write(' ')
    if counter < 9 :
        file_to_write.write('\n')

    #radius of point
    file_to_write.write('radius 1 '+str(len(L_g))+' double\n')
    counter = 0
    for grain in L_g :
        file_to_write.write(str(grain.radius))
        counter = counter + 1
        if counter == 9:
            file_to_write.write('\n')
            counter = 0
        else :
            file_to_write.write(' ')
    if counter < 9 :
        file_to_write.write('\n')

    #speeds of point
    file_to_write.write('v 3 '+str(len(L_g))+' double\n')
    counter = 0
    for grain in L_g :
        file_to_write.write(str(grain.v[0])+' '+str(grain.v[1])+' '+str(grain.v[2]))
        counter = counter + 1
        if counter == 3:
            file_to_write.write('\n')
            counter = 0
        else :
            file_to_write.write(' ')
    if counter < 3 :
        file_to_write.write('\n')

    #rotations of point
    file_to_write.write('omega 3 '+str(len(L_g))+' double\n')
    counter = 0
    for grain in L_g :
        file_to_write.write(str(grain.w[0])+' '+str(grain.w[1])+' '+str(grain.w[2]))
        counter = counter + 1
        if counter == 3:
            file_to_write.write('\n')
            counter = 0
        else :
            file_to_write.write(' ')
    if counter < 3 :
        file_to_write.write('\n')

    #close file
    file_to_write.close()
